/* tslint:disable */
/* eslint-disable */
/**
 * runciv
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: git@omikron.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiErrorResponse,
  CreateFriendRequest,
  GetFriendResponse,
} from '../models';
import {
    ApiErrorResponseFromJSON,
    ApiErrorResponseToJSON,
    CreateFriendRequestFromJSON,
    CreateFriendRequestToJSON,
    GetFriendResponseFromJSON,
    GetFriendResponseToJSON,
} from '../models';

export interface AcceptFriendRequestRequest {
    uuid: string;
}

export interface CreateFriendRequestRequest {
    createFriendRequest: CreateFriendRequest;
}

export interface DeleteFriendRequest {
    uuid: string;
}

/**
 * 
 */
export class FriendsApi extends runtime.BaseAPI {

    /**
     * Accept a friend request
     * Accept a friend request
     */
    async acceptFriendRequestRaw(requestParameters: AcceptFriendRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling acceptFriendRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/friends/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Accept a friend request
     * Accept a friend request
     */
    async acceptFriendRequest(requestParameters: AcceptFriendRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.acceptFriendRequestRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new friend request  The other party is notified via a [WsMessage::IncomingFriendRequest]
     * Create a new friend request
     */
    async createFriendRequestRaw(requestParameters: CreateFriendRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createFriendRequest === null || requestParameters.createFriendRequest === undefined) {
            throw new runtime.RequiredError('createFriendRequest','Required parameter requestParameters.createFriendRequest was null or undefined when calling createFriendRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/friends`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFriendRequestToJSON(requestParameters.createFriendRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new friend request  The other party is notified via a [WsMessage::IncomingFriendRequest]
     * Create a new friend request
     */
    async createFriendRequest(requestParameters: CreateFriendRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createFriendRequestRaw(requestParameters, initOverrides);
    }

    /**
     * Don\'t want your friends anymore? Just delete them!
     * Don\'t want your friends anymore? Just delete them!
     */
    async deleteFriendRaw(requestParameters: DeleteFriendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling deleteFriend.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/friends/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Don\'t want your friends anymore? Just delete them!
     * Don\'t want your friends anymore? Just delete them!
     */
    async deleteFriend(requestParameters: DeleteFriendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteFriendRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve your friends and friend requests.  `friends` is a list of already established friendships `friend_requests` is a list of friend requests (ingoing and outgoing)  Regarding `friend_requests`:  If you have a request with `from.uuid` equal to your username, it means you have requested a friendship, but the destination hasn\'t accepted yet.  In the other case, if your username is in `to.uuid`, you have received a friend request.
     * Retrieve your friends and friend requests.
     */
    async getFriendsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFriendResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/friends`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFriendResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve your friends and friend requests.  `friends` is a list of already established friendships `friend_requests` is a list of friend requests (ingoing and outgoing)  Regarding `friend_requests`:  If you have a request with `from.uuid` equal to your username, it means you have requested a friendship, but the destination hasn\'t accepted yet.  In the other case, if your username is in `to.uuid`, you have received a friend request.
     * Retrieve your friends and friend requests.
     */
    async getFriends(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFriendResponse> {
        const response = await this.getFriendsRaw(initOverrides);
        return await response.value();
    }

}
