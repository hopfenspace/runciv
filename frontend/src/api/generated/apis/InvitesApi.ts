/* tslint:disable */
/* eslint-disable */
/**
 * runciv
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: git@omikron.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiErrorResponse,
  CreateInviteRequest,
  GetInvitesResponse,
} from '../models';
import {
    ApiErrorResponseFromJSON,
    ApiErrorResponseToJSON,
    CreateInviteRequestFromJSON,
    CreateInviteRequestToJSON,
    GetInvitesResponseFromJSON,
    GetInvitesResponseToJSON,
} from '../models';

export interface AcceptInviteRequest {
    uuid: string;
}

export interface CreateInviteOperationRequest {
    createInviteRequest: CreateInviteRequest;
}

export interface DeleteInviteRequest {
    uuid: string;
}

/**
 * 
 */
export class InvitesApi extends runtime.BaseAPI {

    /**
     * Accept an invite to a lobby  The executing user must not be the owner of a lobby or already member of a lobby. To be placed in a lobby, a active websocket connection is required.  If the lobby is already full, a [ApiError::LobbyFull] error is returned.  On success, all players that were in the lobby before, are notified about the new player with a [WsMessage::LobbyJoin] message.
     * Accept an invite to a lobby
     */
    async acceptInviteRaw(requestParameters: AcceptInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling acceptInvite.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/invites/{uuid}/accept`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Accept an invite to a lobby  The executing user must not be the owner of a lobby or already member of a lobby. To be placed in a lobby, a active websocket connection is required.  If the lobby is already full, a [ApiError::LobbyFull] error is returned.  On success, all players that were in the lobby before, are notified about the new player with a [WsMessage::LobbyJoin] message.
     * Accept an invite to a lobby
     */
    async acceptInvite(requestParameters: AcceptInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.acceptInviteRaw(requestParameters, initOverrides);
    }

    /**
     * Invite a friend to a lobby.  The executing user must be in the specified open lobby. The invited `friend` must not be in a friend request state.
     * Invite a friend to a lobby.
     */
    async createInviteRaw(requestParameters: CreateInviteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createInviteRequest === null || requestParameters.createInviteRequest === undefined) {
            throw new runtime.RequiredError('createInviteRequest','Required parameter requestParameters.createInviteRequest was null or undefined when calling createInvite.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/invites`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateInviteRequestToJSON(requestParameters.createInviteRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Invite a friend to a lobby.  The executing user must be in the specified open lobby. The invited `friend` must not be in a friend request state.
     * Invite a friend to a lobby.
     */
    async createInvite(requestParameters: CreateInviteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createInviteRaw(requestParameters, initOverrides);
    }

    /**
     * Reject or retract an invite to a lobby  This endpoint can be used either by the sender of the invite to retract the invite or by the receiver to reject the invite.
     * Reject or retract an invite to a lobby
     */
    async deleteInviteRaw(requestParameters: DeleteInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling deleteInvite.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/invites/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reject or retract an invite to a lobby  This endpoint can be used either by the sender of the invite to retract the invite or by the receiver to reject the invite.
     * Reject or retract an invite to a lobby
     */
    async deleteInvite(requestParameters: DeleteInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteInviteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve all invites for the executing user
     * Retrieve all invites for the executing user
     */
    async getInvitesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetInvitesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/invites`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetInvitesResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve all invites for the executing user
     * Retrieve all invites for the executing user
     */
    async getInvites(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetInvitesResponse> {
        const response = await this.getInvitesRaw(initOverrides);
        return await response.value();
    }

}
