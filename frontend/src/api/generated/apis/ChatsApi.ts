/* tslint:disable */
/* eslint-disable */
/**
 * runciv
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: git@omikron.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiErrorResponse,
  ChatMessage,
  GetAllChatsResponse,
  GetChatResponse,
  SendMessageRequest,
} from '../models';
import {
    ApiErrorResponseFromJSON,
    ApiErrorResponseToJSON,
    ChatMessageFromJSON,
    ChatMessageToJSON,
    GetAllChatsResponseFromJSON,
    GetAllChatsResponseToJSON,
    GetChatResponseFromJSON,
    GetChatResponseToJSON,
    SendMessageRequestFromJSON,
    SendMessageRequestToJSON,
} from '../models';

export interface GetChatRequest {
    uuid: string;
}

export interface SendMessageOperationRequest {
    uuid: string;
    sendMessageRequest: SendMessageRequest;
}

/**
 * 
 */
export class ChatsApi extends runtime.BaseAPI {

    /**
     * Retrieve all chats the executing user has access to.  In the response, you will find different categories.
     * Retrieve all chats the executing user has access to.
     */
    async getAllChatsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAllChatsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/chats`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAllChatsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve all chats the executing user has access to.  In the response, you will find different categories.
     * Retrieve all chats the executing user has access to.
     */
    async getAllChats(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAllChatsResponse> {
        const response = await this.getAllChatsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the messages of a chatroom  `messages` should be sorted by the datetime of `message.created_at`. `message.uuid` should be used to uniquely identify chat messages. This is needed as new messages are delivered via websocket  `members` holds information about all members that are currently in the chat room (including yourself)
     * Retrieve the messages of a chatroom
     */
    async getChatRaw(requestParameters: GetChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetChatResponse>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getChat.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/chats/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetChatResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve the messages of a chatroom  `messages` should be sorted by the datetime of `message.created_at`. `message.uuid` should be used to uniquely identify chat messages. This is needed as new messages are delivered via websocket  `members` holds information about all members that are currently in the chat room (including yourself)
     * Retrieve the messages of a chatroom
     */
    async getChat(requestParameters: GetChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetChatResponse> {
        const response = await this.getChatRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send a message to the specified chatroom  The executing user must be a member of the chatroom and the `message` must not be empty.
     * Send a message to the specified chatroom
     */
    async sendMessageRaw(requestParameters: SendMessageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatMessage>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling sendMessage.');
        }

        if (requestParameters.sendMessageRequest === null || requestParameters.sendMessageRequest === undefined) {
            throw new runtime.RequiredError('sendMessageRequest','Required parameter requestParameters.sendMessageRequest was null or undefined when calling sendMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/chats/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendMessageRequestToJSON(requestParameters.sendMessageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatMessageFromJSON(jsonValue));
    }

    /**
     * Send a message to the specified chatroom  The executing user must be a member of the chatroom and the `message` must not be empty.
     * Send a message to the specified chatroom
     */
    async sendMessage(requestParameters: SendMessageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatMessage> {
        const response = await this.sendMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
