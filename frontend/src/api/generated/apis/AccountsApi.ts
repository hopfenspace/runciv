/* tslint:disable */
/* eslint-disable */
/**
 * runciv
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: git@omikron.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccountRegistrationRequest,
  AccountResponse,
  ApiErrorResponse,
  LookupAccountUsernameRequest,
  SetPasswordRequest,
  UpdateAccountRequest,
} from '../models';
import {
    AccountRegistrationRequestFromJSON,
    AccountRegistrationRequestToJSON,
    AccountResponseFromJSON,
    AccountResponseToJSON,
    ApiErrorResponseFromJSON,
    ApiErrorResponseToJSON,
    LookupAccountUsernameRequestFromJSON,
    LookupAccountUsernameRequestToJSON,
    SetPasswordRequestFromJSON,
    SetPasswordRequestToJSON,
    UpdateAccountRequestFromJSON,
    UpdateAccountRequestToJSON,
} from '../models';

export interface LookupAccountByUsernameRequest {
    lookupAccountUsernameRequest: LookupAccountUsernameRequest;
}

export interface LookupAccountByUuidRequest {
    uuid: string;
}

export interface RegisterAccountRequest {
    accountRegistrationRequest: AccountRegistrationRequest;
}

export interface SetPasswordOperationRequest {
    setPasswordRequest: SetPasswordRequest;
}

export interface UpdateMeRequest {
    updateAccountRequest: UpdateAccountRequest;
}

/**
 * 
 */
export class AccountsApi extends runtime.BaseAPI {

    /**
     * Deletes the currently logged-in account
     * Deletes the currently logged-in account
     */
    async deleteMeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/accounts/me`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the currently logged-in account
     * Deletes the currently logged-in account
     */
    async deleteMe(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteMeRaw(initOverrides);
    }

    /**
     * Returns the account that is currently logged-in
     * Returns the account that is currently logged-in
     */
    async getMeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/accounts/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountResponseFromJSON(jsonValue));
    }

    /**
     * Returns the account that is currently logged-in
     * Returns the account that is currently logged-in
     */
    async getMe(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountResponse> {
        const response = await this.getMeRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve details for an account by its username  **Important note**:  Usernames can be changed, so don\'t assume you can cache them to do lookups for their display names or uuids when necessary. They solely exist to provide a good user experience when searching for friends, etc..  If you receive a username by a user, you should convert them with this endpoint to an uuid. Those are used in the database to uniquely identify a user and can\'t be changed, just deleted.
     * Retrieve details for an account by its username
     */
    async lookupAccountByUsernameRaw(requestParameters: LookupAccountByUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountResponse>> {
        if (requestParameters.lookupAccountUsernameRequest === null || requestParameters.lookupAccountUsernameRequest === undefined) {
            throw new runtime.RequiredError('lookupAccountUsernameRequest','Required parameter requestParameters.lookupAccountUsernameRequest was null or undefined when calling lookupAccountByUsername.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/accounts/lookup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LookupAccountUsernameRequestToJSON(requestParameters.lookupAccountUsernameRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve details for an account by its username  **Important note**:  Usernames can be changed, so don\'t assume you can cache them to do lookups for their display names or uuids when necessary. They solely exist to provide a good user experience when searching for friends, etc..  If you receive a username by a user, you should convert them with this endpoint to an uuid. Those are used in the database to uniquely identify a user and can\'t be changed, just deleted.
     * Retrieve details for an account by its username
     */
    async lookupAccountByUsername(requestParameters: LookupAccountByUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountResponse> {
        const response = await this.lookupAccountByUsernameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve details for an account by uuid  As usernames are changeable, accounts are identified by uuids, which are used throughout the API.  To fetch `display_name` and `username` for a given `uuid`, this endpoint shall be used.
     * Retrieve details for an account by uuid
     */
    async lookupAccountByUuidRaw(requestParameters: LookupAccountByUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountResponse>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling lookupAccountByUuid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/accounts/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve details for an account by uuid  As usernames are changeable, accounts are identified by uuids, which are used throughout the API.  To fetch `display_name` and `username` for a given `uuid`, this endpoint shall be used.
     * Retrieve details for an account by uuid
     */
    async lookupAccountByUuid(requestParameters: LookupAccountByUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountResponse> {
        const response = await this.lookupAccountByUuidRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Register a new account
     * Register a new account
     */
    async registerAccountRaw(requestParameters: RegisterAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accountRegistrationRequest === null || requestParameters.accountRegistrationRequest === undefined) {
            throw new runtime.RequiredError('accountRegistrationRequest','Required parameter requestParameters.accountRegistrationRequest was null or undefined when calling registerAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/accounts/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountRegistrationRequestToJSON(requestParameters.accountRegistrationRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Register a new account
     * Register a new account
     */
    async registerAccount(requestParameters: RegisterAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.registerAccountRaw(requestParameters, initOverrides);
    }

    /**
     * Sets a new password for the currently logged-in account
     * Sets a new password for the currently logged-in account
     */
    async setPasswordRaw(requestParameters: SetPasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.setPasswordRequest === null || requestParameters.setPasswordRequest === undefined) {
            throw new runtime.RequiredError('setPasswordRequest','Required parameter requestParameters.setPasswordRequest was null or undefined when calling setPassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/accounts/me/setPassword`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetPasswordRequestToJSON(requestParameters.setPasswordRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sets a new password for the currently logged-in account
     * Sets a new password for the currently logged-in account
     */
    async setPassword(requestParameters: SetPasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.setPasswordRaw(requestParameters, initOverrides);
    }

    /**
     * Updates the currently logged-in account  All parameter are optional, but at least one of them is required.  On success, a [WsMessage::AccountUpdated] message is sent via websocket to the own user. This is done to reflect account changes in multi-device circumstances.
     * Updates the currently logged-in account
     */
    async updateMeRaw(requestParameters: UpdateMeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.updateAccountRequest === null || requestParameters.updateAccountRequest === undefined) {
            throw new runtime.RequiredError('updateAccountRequest','Required parameter requestParameters.updateAccountRequest was null or undefined when calling updateMe.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/accounts/me`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAccountRequestToJSON(requestParameters.updateAccountRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the currently logged-in account  All parameter are optional, but at least one of them is required.  On success, a [WsMessage::AccountUpdated] message is sent via websocket to the own user. This is done to reflect account changes in multi-device circumstances.
     * Updates the currently logged-in account
     */
    async updateMe(requestParameters: UpdateMeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateMeRaw(requestParameters, initOverrides);
    }

}
