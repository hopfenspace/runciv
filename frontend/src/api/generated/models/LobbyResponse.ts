/* tslint:disable */
/* eslint-disable */
/**
 * runciv
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: git@omikron.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AccountResponse } from './AccountResponse';
import {
    AccountResponseFromJSON,
    AccountResponseFromJSONTyped,
    AccountResponseToJSON,
} from './AccountResponse';

/**
 * A single lobby
 * @export
 * @interface LobbyResponse
 */
export interface LobbyResponse {
    /**
     * 
     * @type {string}
     * @memberof LobbyResponse
     */
    uuid: string;
    /**
     * 
     * @type {string}
     * @memberof LobbyResponse
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof LobbyResponse
     */
    maxPlayers: number;
    /**
     * 
     * @type {number}
     * @memberof LobbyResponse
     */
    currentPlayers: number;
    /**
     * 
     * @type {Date}
     * @memberof LobbyResponse
     */
    createdAt: Date;
    /**
     * 
     * @type {boolean}
     * @memberof LobbyResponse
     */
    password: boolean;
    /**
     * 
     * @type {AccountResponse}
     * @memberof LobbyResponse
     */
    owner: AccountResponse;
    /**
     * 
     * @type {string}
     * @memberof LobbyResponse
     */
    chatRoomUuid: string;
}

/**
 * Check if a given object implements the LobbyResponse interface.
 */
export function instanceOfLobbyResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "uuid" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "maxPlayers" in value;
    isInstance = isInstance && "currentPlayers" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "password" in value;
    isInstance = isInstance && "owner" in value;
    isInstance = isInstance && "chatRoomUuid" in value;

    return isInstance;
}

export function LobbyResponseFromJSON(json: any): LobbyResponse {
    return LobbyResponseFromJSONTyped(json, false);
}

export function LobbyResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): LobbyResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'uuid': json['uuid'],
        'name': json['name'],
        'maxPlayers': json['max_players'],
        'currentPlayers': json['current_players'],
        'createdAt': (new Date(json['created_at'])),
        'password': json['password'],
        'owner': AccountResponseFromJSON(json['owner']),
        'chatRoomUuid': json['chat_room_uuid'],
    };
}

export function LobbyResponseToJSON(value?: LobbyResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'uuid': value.uuid,
        'name': value.name,
        'max_players': value.maxPlayers,
        'current_players': value.currentPlayers,
        'created_at': (value.createdAt.toISOString()),
        'password': value.password,
        'owner': AccountResponseToJSON(value.owner),
        'chat_room_uuid': value.chatRoomUuid,
    };
}

