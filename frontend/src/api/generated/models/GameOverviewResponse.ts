/* tslint:disable */
/* eslint-disable */
/**
 * runciv
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: git@omikron.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AccountResponse } from './AccountResponse';
import {
    AccountResponseFromJSON,
    AccountResponseFromJSONTyped,
    AccountResponseToJSON,
} from './AccountResponse';

/**
 * A shortened game state identified by its ID and state identifier
 * 
 * If the state (`game_data_id`) of a known game differs from the last known
 * identifier, the server has a newer state of the game. The `last_activity`
 * field is a convenience attribute and shouldn't be used for update checks.
 * @export
 * @interface GameOverviewResponse
 */
export interface GameOverviewResponse {
    /**
     * 
     * @type {string}
     * @memberof GameOverviewResponse
     */
    gameUuid: string;
    /**
     * 
     * @type {number}
     * @memberof GameOverviewResponse
     */
    gameDataId: number;
    /**
     * 
     * @type {string}
     * @memberof GameOverviewResponse
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof GameOverviewResponse
     */
    maxPlayers: number;
    /**
     * 
     * @type {Date}
     * @memberof GameOverviewResponse
     */
    lastActivity: Date;
    /**
     * 
     * @type {AccountResponse}
     * @memberof GameOverviewResponse
     */
    lastPlayer: AccountResponse;
    /**
     * 
     * @type {string}
     * @memberof GameOverviewResponse
     */
    chatRoomUuid: string;
}

/**
 * Check if a given object implements the GameOverviewResponse interface.
 */
export function instanceOfGameOverviewResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "gameUuid" in value;
    isInstance = isInstance && "gameDataId" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "maxPlayers" in value;
    isInstance = isInstance && "lastActivity" in value;
    isInstance = isInstance && "lastPlayer" in value;
    isInstance = isInstance && "chatRoomUuid" in value;

    return isInstance;
}

export function GameOverviewResponseFromJSON(json: any): GameOverviewResponse {
    return GameOverviewResponseFromJSONTyped(json, false);
}

export function GameOverviewResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): GameOverviewResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'gameUuid': json['game_uuid'],
        'gameDataId': json['game_data_id'],
        'name': json['name'],
        'maxPlayers': json['max_players'],
        'lastActivity': (new Date(json['last_activity'])),
        'lastPlayer': AccountResponseFromJSON(json['last_player']),
        'chatRoomUuid': json['chat_room_uuid'],
    };
}

export function GameOverviewResponseToJSON(value?: GameOverviewResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'game_uuid': value.gameUuid,
        'game_data_id': value.gameDataId,
        'name': value.name,
        'max_players': value.maxPlayers,
        'last_activity': (value.lastActivity.toISOString()),
        'last_player': AccountResponseToJSON(value.lastPlayer),
        'chat_room_uuid': value.chatRoomUuid,
    };
}

